#!/bin/bash

# -----------------------------------------------------------------------------
# INSTALL
#
# Sets up command line tools and package managers and downloads all configured
# applications.
#
# Usage: _install [tasks...]
# -----------------------------------------------------------------------------

set -e

# -----------------------------------------------------------------------------
# Preparation: Install Xcode command line tools
# -----------------------------------------------------------------------------

function xcodeCli {
  echo "Installing command line developer tools ..."
  xcode-select --install
}

# -----------------------------------------------------------------------------
# Install shell
# -----------------------------------------------------------------------------

function shell {
  echo "Installing shell ..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
}

function shellExtensions {
  git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
}

# -----------------------------------------------------------------------------
# Install package managers
# -----------------------------------------------------------------------------

function packageManagers {
  echo "Installing homebrew ..."
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

  echo "Installing cask ..."
  brew tap "homebrew/cask"

  echo "Installing homebrew bundle"
  brew tap "homebrew/bundle"
}

# -----------------------------------------------------------------------------
# Install software
# -----------------------------------------------------------------------------

function software {
  echo "Installing software ..."
  brew bundle install --file="${DOTFILES_ROOT}/setup/Brewfile"
}

# -----------------------------------------------------------------------------
# Install gems
# -----------------------------------------------------------------------------

function gems {
  echo "Installing gems ..."
  gem install bundler && bundle install --gemfile="${DOTFILES_ROOT}/setup/Gemfile"
}

# -----------------------------------------------------------------------------
# Install Code extensions
# -----------------------------------------------------------------------------

function codeExtensions {
  echo "Installing Code extensions ..."
  while read -r extension
  do
    if [[ "$extension" =~ \#.+ ]]
    then
      echo "Skipping ${extension}"
    else
      code --install-extension "$extension"
    fi
  done < "$DOTFILES_ROOT/setup/Codefile"
}

# -----------------------------------------------------------------------------
# Install global npm packages
# -----------------------------------------------------------------------------

function nvm {
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh | bash
  echo "Please restart the shell for nvm to take effect."
}

function node {
  nvm install 'lts/*'
  nvm alias default 'lts/*'
}

function npmPackages {
  packages=(
    "@vue/cli"
    "spaceship-prompt"
  )
  npm i -g "${packages[@]}"
}

# -----------------------------------------------------------------------------
# Run
# -----------------------------------------------------------------------------

tasks=(
  "Xcode CLI"
  "Shell"
  "Shell extensions"
  "Brew, cask, bundle"
  "Software in brewfile"
  "Gems"
  "VS Code extensions"
  "Node version manager"
  "Node LTS"
  "Global npm packages"
  "Quit"
)

select task in "${tasks[@]}"
do
  case "$task" in
    "Xcode CLI") xcodeCli;;
    "Shell") shell;;
    "Shell extensions") shellExtensions;;
    "Brew, cask, bundle") packageManagers;;
    "Software in brewfile") software;;
    "Gems") gems;;
    "VS Code extensions") codeExtensions;;
    "Node version manager") nvm;;
    "Node LTS") node;;
    "Global npm packages") npmPackages;;
    "Quit") break;;
    *) "$task is not a valid option"
  esac
done
