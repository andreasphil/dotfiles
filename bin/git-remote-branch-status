#!/bin/bash

# GIT REMOTE BRANCH STATUS
#
# Goes through all local branches and checks if they exist at
# origin (marked with a checkmark). If you set the `--clean`
# option, you will see a menu allowing you to delete local
# branches afterwards.

# Strict mode ---------------------------------------------

set -u            # no unset variables
set -e            # exit immediately on error
set -E            # inherit -e in functions
set -o pipefail   # return value of pipeline is rightmost return

# Utilities -----------------------------------------------

# Exit if the specified command does not exist.
#
# Usage:
#   _require <command>
_require() {
  if ! type "$1" &>/dev/null; then
    printf "\033[0;31m\033[1mERROR\033[0m required dependency %s is missing\n" "$1"
    exit 1
  fi
}

# Internal ------------------------------------------------

_check_branches() {
  local results=""

  for i in $(git branch | cut -c 3-); do
    local finds=$(git ls-remote --heads origin "$i" | wc -l | tr -d " ")
    local status=" "

    if [[ "$finds" -gt 0 ]]; then
      status="âœ“"
    fi

    results="$results|$(printf "[%s] %s" "$status" "$i")"
  done

  echo "${results#|}"
}

# Init ----------------------------------------------------

_require "gum"

results="$(_check_branches)"

if [[ $# -eq 1 && "$1" == "--clean" ]]; then
  to_delete=$(echo "$results" | gum choose \
    --header "Choose branches to delete:" \
    --input-delimiter="|" \
    --output-delimiter="|" \
    --no-limit \
    --selected-prefix="x "
  )

  to_delete=$(echo "$to_delete" | sed -e 's/|*\[.\] / /g' -e 's/^ //')

  if gum confirm "Delete the following branches? $to_delete"; then
    git branch -D $to_delete
  else
    echo "ok"
  fi
else
  printf "${results//|/\n}\n"
fi

