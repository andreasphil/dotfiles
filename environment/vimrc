" -----------------------------------------------------------------------------
" VIM SETTINGS
" -----------------------------------------------------------------------------

" Editor layout
set breakindent    " indent lines when they're softwrapped
set breakindentopt=shift:2,min:20 " settings for breakindent
set laststatus=2   " always show the status line
set linebreak      " don't break within words
set noshowmode     " disable showing mode because lightline does that
set number         " show line numbers
set ruler          " show ruler
set signcolumn=yes " always show status column next to line numbers
set wrap           " softwrap when the text runs longer than the window
set colorcolumn=80 " show guide for limiting line length

" Search
set hlsearch       " highlight search results
set ignorecase     " ignore case when searching for lowercase terms
set incsearch      " make search results more browser-y
set smartcase      " don't ignore case when searching for uppercase terms

" Indenting and tabs
set autoindent     " copy indent from current line when starting a new line
set expandtab      " insert spaces instead of tabs
set shiftwidth=2   " set width of a tabstop when shifting lines
set smartindent    " smart autoindenting for programming (e.g. after {)
set smarttab       " insert `shiftwidth` tabs at the beginning of a line
set tabstop=2      " set width of a tabstop

" Behavior
set autoread       " refresh files when they change
set completeopt=menuone,noinsert " always show the menu, no automatic inserting
set mouse=a        " it's 2021 and I want to click on stuff
set splitbelow     " create new horizontal splits at the bottom
set splitright     " create new vertical splits on the right side
set switchbuf+=usetab,newtab " use tabs for switching buffers, reuse existing
set updatetime=300 " snappier updates
set wildmenu       " enable better completion

" Disable backups because it's stored in git anyway
set nobackup
set nowritebackup
set noswapfile

" -----------------------------------------------------------------------------
" PLUGINS
" -----------------------------------------------------------------------------

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
  " Editor features
  Plug 'airblade/vim-gitgutter'
  Plug 'itchyny/lightline.vim'
  Plug 'jremmen/vim-ripgrep'
  Plug 'maxbrunsfeld/vim-yankstack'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'preservim/nerdtree'
  Plug 'terryma/vim-expand-region'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-surround'

  " Language syntax & integration
  Plug 'alexlafroscia/postcss-syntax.vim'
  Plug 'cakebaker/scss-syntax.vim'
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  Plug 'mattn/emmet-vim'
  Plug 'neoclide/jsonc.vim'
  Plug 'pangloss/vim-javascript'
  Plug 'posva/vim-vue'
  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

  " Color schemes
  Plug 'cocopon/iceberg.vim'
  Plug 'gkeep/iceberg-dark'

  " Neovim only
  Plug 'neovim/nvim-lspconfig', has('nvim') ? {} : { 'on': [] }
  Plug 'nvim-lua/plenary.nvim', has('nvim') ? {} : { 'on': [] }
  Plug 'nvim-lua/popup.nvim', has('nvim') ? {} : { 'on': [] }
  Plug 'nvim-telescope/telescope.nvim', has('nvim') ? {} : { 'on': [] }
call plug#end()

" Cleanup trailing whitespace automatically
let g:better_whitespace_enabled = 1
let g:strip_whitespace_confirm = 0
let g:strip_whitespace_on_save = 1

" We'll set our own key mappings later on
let g:yankstack_map_keys = 0

" Various other language plugin options
let g:javascript_plugin_jsdoc = 1
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_frontmatter = 1
let g:vue_pre_processors = 'detect_on_enter'

" Make plugin defaults consistent with prettier defaults
let g:prettier#autoformat_require_pragma = 0
let g:prettier#config#arrow_parens = 'always'
let g:prettier#config#autoformat_config_present = 1
let g:prettier#config#print_width = 80
let g:prettier#config#tab_width = 2
let g:prettier#config#trailing_comma = 'es5'
let g:prettier#config#use_tabs = 'false'

let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '~'
let g:gitgutter_sign_modified_removed = '~-'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_above_and_below = '-↕'
let g:gitgutter_sign_removed_first_line = '-↕'

" ---------------------------------------------------------------------------
" UI
" ---------------------------------------------------------------------------

if (has('termguicolors'))
  set termguicolors
endif

colorscheme iceberg

hi! LspDiagnosticsDefaultHint ctermfg=242 guifg=#6b7089
hi! LspDiagnosticsUnderlineHint cterm=underline gui=undercurl guisp=#6b7089
hi! LspDiagnosticsSignHint ctermfg=242 guifg=#6b7089 guibg=#1e2132
hi! LspDiagnosticsDefaultError ctermfg=203 guifg=#e27878
hi! LspDiagnosticsUnderlineError cterm=underline gui=undercurl guisp=#e27878
hi! LspDiagnosticsSignError ctermfg=203 guifg=#e27878 guibg=#442424
hi! LspDiagnosticsDefaultWarning ctermfg=216 guifg=#e2a478
hi! LspDiagnosticsUnderlineWarning cterm=underline gui=undercurl guisp=#e2a478
hi! LspDiagnosticsSignWarning ctermfg=216 guifg=#e2a478 guibg=#443124
hi! LspDiagnosticsUnderlineInformation cterm=underline gui=undercurl guisp=#a093c7
hi! LspDiagnosticsSignInformation ctermfg=140 guifg=#a093c7 guibg=#302c3c

hi! ExtraWhitespace ctermbg=216 guibg=#443124
hi! Search ctermfg=234 ctermbg=216 guifg=#ffcc66 guibg=#443124

hi Comment gui=italic cterm=italic term=italic
hi Conditional gui=italic cterm=italic term=italic
hi Exception gui=italic cterm=italic term=italic
hi Keyword gui=italic cterm=italic term=italic
hi Label gui=italic cterm=italic term=italic
hi Repeat gui=italic cterm=italic term=italic
hi StorageClass gui=italic cterm=italic term=italic

let g:lightline = {
  \ 'colorscheme': 'icebergDark',
  \ 'active': {
  \   'left': [['mode', 'paste'], ['fugitive', 'gitstatus', 'readonly', 'filename', 'modified']]
  \ },
  \ 'component_function': {
  \   'readonly': 'LightlineReadonly',
  \   'fugitive': 'LightlineFugitive',
  \   'gitstatus': 'LightlineGitStatus'
  \ },
  \ }

function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction

function! LightlineFugitive()
  if exists('*FugitiveHead')
    let branch = FugitiveHead()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

function! LightlineGitStatus()
  let out = ''

  if exists('*GitGutterGetHunkSummary')
    let [a, m, r] = GitGutterGetHunkSummary()
    if (a > 0)
      let out = join([out, g:gitgutter_sign_added], '')
    endif
    if (m > 0)
      let out = join([out, g:gitgutter_sign_modified], '')
    endif
    if (r > 0)
      let out = join([out, g:gitgutter_sign_removed], '')
    endif
  endif

  return out
endfunction

" ---------------------------------------------------------------------------
" KEY MAPPINGS
" ---------------------------------------------------------------------------

let mapleader = ','

nmap <leader>; :tabnew ~/.vimrc<cr>
nmap <leader><C-t> :tabnew<cr>
nmap <leader>e :NERDTreeFocus<cr>
nmap <leader>E :NERDTreeToggle<cr>
nmap <leader>F :PrettierAsync<cr>
nmap <leader>ht :GitGutterSignsToggle<cr>
nmap <leader>N :nohlsearch<cr>
nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste

" Faster window switching
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" System clipboard access
vmap <leader>c "*y
vmap <leader>C "*yy
vmap <leader>x "*d
vmap <leader>X "*dd
nmap <leader>v "*p
nmap <leader>V "*P

" Fix gx, see https://github.com/vim/vim/issues/4738#issuecomment-856925080
nnoremap <silent> gx :execute 'silent! !open ' . shellescape(expand('<cWORD>'), 1)<cr>

" Toggle checkboxes in markdown files
autocmd FileType markdown nmap <silent> <C-k>k :s/- \[ ]/- [x]/<cr>:nohlsearch<cr>
autocmd FileType markdown nmap <silent> <C-k>u :s/- \[x]/- [ ]/<cr>:nohlsearch<cr>

" Neovim only
if (has('nvim'))
  nmap T :Telescope<cr>
  nmap <C-p> :Telescope fd<cr>
  nmap <leader>ff :Telescope current_buffer_fuzzy_find<cr>
  nmap <leader>fg :Telescope live_grep<cr>
  nmap <leader>fe :Telescope file_browser<cr>
  nmap <leader>fb :Telescope buffers<cr>
endif

" ---------------------------------------------------------------------------
" LSP
" ---------------------------------------------------------------------------

if (has('nvim'))
lua << EOF
  local on_attach = function(client, bufnr)
    local function set_opt(...) vim.api.nvim_buf_set_option(bufnr, ...) end
    set_opt('omnifunc', 'v:lua.vim.lsp.omnifunc')

    local function map_key(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local opts = {
      noremap = true,
      silent = true
    }

    map_key('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
    map_key('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
    map_key('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    map_key('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    map_key('n', 'gs', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    map_key('n', '<leader>fo', '<cmd>Telescope lsp_document_symbols<cr>', opts)
    map_key('n', 'gl', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
    map_key('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
    map_key('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
    map_key('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
    map_key('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
    map_key('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    map_key('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
  end

  vim.fn.sign_define('LspDiagnosticsSignHint', { text = '●', texthl = 'LspDiagnosticsSignHint' })
  vim.fn.sign_define('LspDiagnosticsSignError', { text = '●', texthl = 'LspDiagnosticsSignError' })
  vim.fn.sign_define('LspDiagnosticsSignWarning', { text = '●', texthl = 'LspDiagnosticsSignWarning' })
  vim.fn.sign_define('LspDiagnosticsSignInformation', { text = '●', texthl = 'LspDiagnosticsSignInformation' })

  vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
    virtual_text = {
      prefix = "●",
      spacing = 0,
    },
    signs = true,
    underline = true,
  })

  local opts = {
    on_attach = on_attach,
    flags = { debounce_text_changes = 150 }
  }

  local servers = {
    'tsserver',
    'html',
    'cssls',
    'jsonls',
    'tailwindcss',
    'vuels',
    -- TODO: Fix Denols clashing with Tsserver
    -- 'denols'
  }

  for _, server in pairs(servers) do
    require'lspconfig'[server].setup(opts)
  end
EOF
endif
