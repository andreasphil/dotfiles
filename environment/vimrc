" -----------------------------------------------------------------------------
" VIM SETTINGS
"
" Much of this is based on https://github.com/amix/vimrc
" -----------------------------------------------------------------------------

" Editor layout
set breakindent    " indent lines when they're softwrapped
set breakindentopt=shift:2,min:20 " settings for breakindent
set laststatus=2   " always show the status line
set linebreak      " don't break within words
set noshowmode     " disable showing mode because lightline does that
set number         " show line numbers
set ruler          " show ruler
set signcolumn=yes " always show status column next to line numbers
set wrap           " softwrap when the text runs longer than the window
set colorcolumn=80 " show guide for limiting line length

" Search
set hlsearch       " highlight search results
set ignorecase     " ignore case when searching for lowercase terms
set incsearch      " make search results more browser-y
set smartcase      " don't ignore case when searching for uppercase terms

" Indenting and tabs
set autoindent     " copy indent from current line when starting a new line
set expandtab      " insert spaces instead of tabs
set shiftwidth=2   " set width of a tabstop when shifting lines
set smartindent    " smart autoindenting for programming (e.g. after {)
set smarttab       " insert `shiftwidth` tabs at the beginning of a line
set tabstop=2      " set width of a tabstop

" Behavior
set autoread       " refresh files when they change
set mouse=a        " it's 2021 and I want to click on stuff
set updatetime=300 " snappier updates
set wildmenu       " enable better completion
set splitright     " create new vertical splits on the right side
set splitbelow     " create new horizontal splits at the bottom

" Disable backups because it's stored in git anyway
set nobackup
set nowritebackup
set noswapfile

" -----------------------------------------------------------------------------
" PLUG
" -----------------------------------------------------------------------------

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" -----------------------------------------------------------------------------
" PLUGINS
" -----------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')
  " General
  Plug 'airblade/vim-gitgutter'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  Plug 'godlygeek/tabular'
  Plug 'itchyny/lightline.vim'
  Plug 'jremmen/vim-ripgrep'
  Plug 'maxbrunsfeld/vim-yankstack'
  Plug 'preservim/nerdtree'
  Plug 'terryma/vim-expand-region'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'

  " Languages
  " TODO: Load on demand
  Plug 'alexlafroscia/postcss-syntax.vim'
  Plug 'cakebaker/scss-syntax.vim'
  Plug 'leafgarland/typescript-vim'
  Plug 'mattn/emmet-vim'
  Plug 'pangloss/vim-javascript'
  Plug 'plasticboy/vim-markdown'
  Plug 'posva/vim-vue'
  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

  " Color schemes
  Plug 'arcticicestudio/nord-vim'
  Plug 'cocopon/iceberg.vim'
  Plug 'gkeep/iceberg-dark'
call plug#end()

let NERDTreeShowHidden = 1

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrl_p_show_hidden = 1
let g:ctrlp_working_path_mode = 'ra'

" Make plugin defaults consistent with prettier defaults
let g:prettier#config#arrow_parens = 'always'
let g:prettier#config#autoformat_config_present = 1
let g:prettier#config#print_width = 80
let g:prettier#config#tab_width = 2
let g:prettier#config#trailing_comma = 'es5'
let g:prettier#config#use_tabs = 'false'

let g:javascript_plugin_jsdoc = 1
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_frontmatter = 1
let g:vue_pre_processors = 'detect_on_enter'

" Color scheme
if (has('termguicolors'))
  set termguicolors
endif

let g:nord_bold = 1
let g:nord_bold_vertical_split_line = 1

colorscheme iceberg

hi Comment gui=italic cterm=italic term=italic
hi Conditional gui=italic cterm=italic term=italic
hi Repeat gui=italic cterm=italic term=italic
hi Label gui=italic cterm=italic term=italic
hi Keyword gui=italic cterm=italic term=italic
hi Exception gui=italic cterm=italic term=italic
hi StorageClass gui=italic cterm=italic term=italic

" Lightline
let g:lightline = {
  \ 'colorscheme': 'icebergDark',
  \ 'active': {
  \   'left': [['mode', 'paste'], ['fugitive', 'readonly', 'filename', 'modified']]
  \ },
  \ 'component_function': {
  \   'readonly': 'LightlineReadonly',
  \   'fugitive': 'LightlineFugitive'
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' }
  \ }

function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction

function! LightlineFugitive()
	if exists('*FugitiveHead')
		let branch = FugitiveHead()
		return branch !=# '' ? ' '.branch : ''
	endif
	return ''
endfunction

" -----------------------------------------------------------------------------
" KEY MAPPINGS
" -----------------------------------------------------------------------------

let mapleader = '.'

nmap <leader>; :tabnew ~/.vimrc<cr>

nmap <leader>e :NERDTreeToggle<cr>
nmap <leader>E :NERDTreeFocus<cr>

nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste

nmap <leader>py <Plug>(PrettierAsync)

nmap <leader><C-t> :tabnew<cr>

" Window navigation
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l

